-Creating a react app from scratch
Source: https://medium.com/swlh/react-without-create-react-app-setting-up-a-dev-build-from-scratch-fefd5d9d6baa

What's needed for development:
1. React: a library of references to the React API. To
actually render React components, you also need a
renderer that will inject functionality into those
references and render them to the DOM.
2. Bundler: Bundles all of your JavaScript, including
modules, into one file. Important cause your JavaScript
will need to be loaded into an HTML document and 
loading <script> tags is very expensive. A bundler
allows you to condense all of your JavaScript into
one file (along with CSS if you like). Using Webpack
as our bundler, and we'll configure it to use both
Babel and ESLint during the bundling process. 
-Babel is necessary to include in React apps
because it transpiles ES6 and JSX into backwards
compatible code.
-Linters basically analyze your code and warn you
about stuff that won't necessarily break your
application but could present problems later.
3. Server: you need a server to host your app during
development, preferably one with hot reload enabled.
Using Webpack's development server here.
4. Tests: 

Steps:
1. Create a project directory and initialize npm
so we can install our packages.
2. Install react and react-dom (the renderer).
3. Create index.html and index.js and link them with
a 'root' div and a document.getElementById('root').
4. Create an App.jsx.
5. Install webpack, webpack-cli, and 
html-webpack-plugin.
6. Install html-loader, css-loader, style-loader.
7. Install Babel (or another bundler).
8. ESLint (or another linter)
9. Configure Webpack, Babel, and ESLinter.
10. Create a webpack.config.js file.
11. 
12. 

Notes:
"mode" is self-explanatory. We’re telling Webpack
were in development.
"entry" is our main JavaScript file, or the ‘entry
point’. In React, this is the file where we use our
renderer.
"output" tells Webpack where to put our bundled code
and what to name the file. Here, we’re telling Webpack
to create a directory named /dir in the root directory
(__dirname is a Node variable representing the current
directory path) and create a file within it named
bundle.js.
"devtool" allows us to utilize development tools
provided by Webpack. I’m using source-map because,
after Webpack compiles our project, all of our code
will be located in a single file we did not create.
source-map builds a separate file that maps the
source of code in our bundled file to the JavaScript
files we actually created.
"module" is where we tell Webpack to use all of those
loaders we installed before. We’re using regex to tell
each loader which file extensions to target. Also,
we’re telling Webpack to run ESLint before Babel
translates our code ("enforce": “pre",), so it can
warn us about stuff in our source code, not the
compiled code.
"plugins" is where we tell Webpack which plugins we
want to use along with any configuration for those
plugins. Here, we’re using the html-webpack-plugin
to generate an HTML file with everything we need to
load our code.

Babel
All we need to do is tell Babel to use the presets we
installed.In a nutshell, @babel/preset-env converts
the latest JavaScript syntax and @babel/preset-react
converts the JSX.


